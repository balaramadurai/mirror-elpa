#!/usr/bin/env bash

# Exit script on errors
set -ue

# Read arguments
show_help=
for arg in "$@"; do
	  case "$arg" in
		    "-h"|--help)
			      show_help=stdin
			      ;;
		    *)
			      >&2 echo "Unrecognised argument: $arg"
			      show_help=stderr
			      break
			      ;;
	  esac
done

# Display help if necessary
help() {
	  echo "Usage: $(basename "$0") [options]"
	  echo "  -h, --help                  print this message and exit"
	  echo
	  echo "Report bugs at https://github.com/d12frosted/mirror-elpa/issues"
	  exit
}
[ "$show_help" = "stdin" ] && help
[ "$show_help" = "stderr" ] && >&2 help

config_file=$XDG_CONFIG_HOME/mirror-elpa.sh

printf "Config file location: "
[ -n "$config_file" ] && printf "%s " "$config_file"
read -r i_config_file
[ -z "$i_config_file" ] && i_config_file="$config_file"
[ -n "$i_config_file" ] && config_file="$i_config_file"

# Declare config variables in case $config_file doesn't
owner=
repo=
name=
email=
message=
access_login=
access_token=

[ -f "$config_file" ] && source "$config_file"

check() {
	  "$@" > /dev/null 2>&1;
	  local ret="$?"
	  if [ "$ret" = 0 ]; then
		  echo "\033[32;32mok\033[0m" # ok
	  else
		    echo "\033[31;31merror\033[0m"
	  fi
	  return $ret
}

while :; do
		printf "GitHub repository owner: "
		[ -n "$owner" ] && printf "%s " "$owner"
		read -r i_owner
		[ -z "$i_owner" ] && i_owner="$owner"
		[ -n "$i_owner" ] && break
done

while :; do
		printf "GitHub repository name: "
		[ -n "$repo" ] && printf "%s " "$repo"
		read -r i_repo
		[ -z "$i_repo" ] && i_repo="$repo"
		[ -n "$i_repo" ] && break
done

owner="$i_owner"
repo="$i_repo"
access_login="$owner"

while :; do
    echo "mirror-elpa needs to be authorized to access $i_owner/$i_repo."
		echo "Please create a token with 'repo' permissions here:"
		echo "https://github.com/settings/tokens/new"
		echo "Alternatively, hit return without entering anything to have mirror-elpa create one for you."

    printf "Repo access login: ($access_login) "
    read i_access_login
    [ -n "$i_access_login" ] && access_login="$i_access_login"

		printf "GitHub API token: "
		read -r i_access_token
		[ -n "$i_access_token" ] && break

		# Generate an API token
		read -rp "Your GitHub username: ($i_owner) " i_auth_user
		read -rsp "Your GitHub password: " i_auth_password
		echo # output blank line after password

    [ "$i_auth_user" ] || i_auth_user="$i_owner"

    github() {
				curl -s "https://api.github.com/$1" \
					   -u "$i_auth_user:$i_auth_password" \
					   -H "Content-Type: application/json" \
					   -H "Accept: application/vnd.github.v3+json" \
					   $(shift 1; echo "$@")
		}
		response=$(github authorizations -X POST -d @- <<-JSON
{
	"scopes": [
		"repo"
	],
	"note": "mirror-elpa@$(hostname)$(pwd)",
	"note_url": "https://github.com/d12frosted/mirror-elpa"
}
JSON
            )
    if echo "$response" | grep '"token"'; then
			echo "$response" | jq -r .token | read i_access_token
		else
				printf "\033[31;31mError: \033[0m"
				echo "$response" | jq -r .message
				echo "You'll need to create a GitHub API token manually."
		fi

		[ -n "$i_access_token" ] && break
done

[ -n "$i_access_token" ] && access_token="$i_access_token"

[ -z "$name" ] && name="A Friendly Bot"
printf "Bot name: ($name) "
read i_name
[ -n "$i_name" ] && name="$i_name"

[ -z "$email" ] &&
	email="$(echo "$name" | sed "s/ /./g" | tr '[:upper:]' '[:lower:]')@example"
printf "Bot email: ($email) "
read i_email
[ -n "$i_email" ] && email="$i_email"

[ -z "$message" ] && message="Sync archives"
printf "Commit message: ($message) "
read i_message
[ -n "$i_message" ] && message="$i_message"

printf "owner=%q\n"        "$owner"         > "$config_file"
printf "repo=%q\n"         "$repo"         >> "$config_file"
printf "name=%q\n"         "$name"         >> "$config_file"
printf "email=%q\n"        "$email"        >> "$config_file"
printf "message=%q\n"      "$message"      >> "$config_file"
printf "access_login=%q\n" "$access_token" >> "$config_file"
printf "access_token=%q\n" "$access_token" >> "$config_file"

echo "Successfully wrote configuration to $config_file"
